+ :
++ echo http://example.com
++ bin/pq.py -q --py

# chill
assert iline.startswith("http")  # "https", "http", etc
assert " " not in iline
oline = iline.replace("://", " :// ").replace(".", " . ").rstrip()

+ T=
++ echo http://example.com
++ bin/pq.py --yolo
+ T='http :// example . com'
++ echo http :// example . com
++ bin/pq.py -q --py

# warm
assert iline.startswith("http")  # "https", "http", etc
assert " " in iline
oline = iline.replace(" ", "")

+ T=
++ echo http :// example . com
++ bin/pq.py --yolo
+ T=http://example.com
+ :
+ A=https://codereviews.example.com/r/123456
++ echo https://codereviews.example.com/r/123456/
++ bin/pq.py -q --py

# crthin
assert re.match(r"http.*codereviews[./]", string=iline)
isplits = urllib.parse.urlsplit(iline)
m = re.match(r"^/r/([0-9]+)", string=isplits.path)  # discards end of path
r = int(m.group(1))
osplits = urllib.parse.SplitResult(
    scheme="http",  # not "https"
    netloc=isplits.netloc.split(".")[0],  # "codereviews"
    path=f"/r/{r}/diff",
    query="",
    fragment="",
)
oline = osplits.geturl()

+ T=
++ echo https://codereviews.example.com/r/123456/
++ bin/pq.py --yolo
+ T=http://codereviews/r/123456/diff
+ :
+ A=https://docs.google.com/document/d/1YfkPxiJjVJXvf4G1-Ql6-IgxE7J22eEG2JzueNjl2T4
++ echo https://docs.google.com/document/d/1YfkPxiJjVJXvf4G1-Ql6-IgxE7J22eEG2JzueNjl2T4/edit#heading=h.xedwnjmaewr
++ bin/pq.py -q --py

# glink
assert re.match(r"http.*[.]google.com/", string=iline)
isplits = urllib.parse.urlsplit(iline)
#
opath = isplits.path
opath = opath.removesuffix("/edit")
opath = opath.removesuffix("/view")
#
osplits = urllib.parse.SplitResult(
    scheme=isplits.scheme,
    netloc=isplits.netloc,
    path=opath,
    query="",
    fragment="",
)
#
oline = osplits.geturl()

+ T=
++ echo https://docs.google.com/document/d/1YfkPxiJjVJXvf4G1-Ql6-IgxE7J22eEG2JzueNjl2T4/edit#heading=h.xedwnjmaewr
++ bin/pq.py --yolo
+ T=https://docs.google.com/document/d/1YfkPxiJjVJXvf4G1-Ql6-IgxE7J22eEG2JzueNjl2T4
+ :
+ A=https://ourjenkins.dev.example.com
++ echo https://ourjenkins.dev.example.com/
++ bin/pq.py -q --py

# jkthin
assert re.match(r"^http.*jenkins[0-9]*[.]", string=iline)
#
iosplits = urllib.parse.urlsplit(iline)
iosplits = iosplits._replace(scheme="http")
iosplits = iosplits._replace(path=iosplits.path.rstrip("/") + "/")
#
netloc = iosplits.netloc.split(".")[0]
netloc = string.capwords(netloc).replace("jenkins", "Jenkins")
iosplits = iosplits._replace(netloc=netloc)
#
oline = iosplits.geturl()

+ T=
++ echo https://ourjenkins.dev.example.com/
++ bin/pq.py --yolo
+ T=http://OurJenkins/
+ A=http://ourJenkins/
++ echo http://ourJenkins//
++ bin/pq.py -q --py

# jkwide
assert re.search(r"[jJ]enkins[0-9]*/", string=iline)
#
fqdn = socket.getfqdn()
dn = fqdn.partition(".")[-1]  # 'Domain Name of HostName'
dn = dn or "example.com"
#
iosplits = urllib.parse.urlsplit(iline)
iosplits = iosplits._replace(scheme="https")
iosplits = iosplits._replace(path=iosplits.path.rstrip("/"))
iosplits = iosplits._replace(netloc=f"{iosplits.netloc.casefold()}.dev.{dn}")
#
oline = iosplits.geturl()

+ T=
++ echo http://ourJenkins//
++ bin/pq.py --yolo
+ T=https://ourjenkins.dev.example.com
+ :
+ A=https://jira.example.com/browse/PROJ-123456
++ echo https://jira.example.com/browse/PROJ-123456
++ bin/pq.py -q --py

# jkey
assert re.match(r"^http.*jira.*/browse/.*$", string=iline)
isplits = urllib.parse.urlsplit(iline)
oline = isplits.path.removeprefix("/browse/")

+ T=
++ echo https://jira.example.com/browse/PROJ-123456
++ bin/pq.py --yolo
+ T=PROJ-123456
+ A=PROJ-123456
++ echo PROJ-123456
++ bin/pq.py -q --py

# jlink
assert re.match(r"^[A-Z]+[-][0-9]+$", string=iline)
#
fqdn = socket.getfqdn()
dn = fqdn.partition(".")[-1]  # 'Domain Name of HostName'
dn = dn or "example.com"
#
isplits = urllib.parse.urlsplit(iline)
osplits = urllib.parse.SplitResult(
    scheme="https",
    netloc=f"jira.{dn}",
    path=f"/browse/{iline}",
    query="",
    fragment="",
)
oline = osplits.geturl()

+ T=
++ echo PROJ-123456
++ bin/pq.py --yolo
+ T=https://jira.example.com/browse/PROJ-123456
+ :
++ echo '{"//":[""]}'
++ bin/pq.py -q --py jq .

otext = json.dumps(json.loads(itext), indent=2) + "\n"  # |jq .  # jq

+ T=
++ echo '{"//":[""]}'
++ bin/pq.py jq .
++ cat -
+ T='{
  "//": [
    ""
  ]
}'
+ :
+ echo '{
  "//": [
    ""
  ]
}'
+ :
+ echo +
+
+ func len bytes
+ set -xe
+ bin/pq.py -q --py len bytes

oobject = len(ibytes)  # bytes len  # |wc -c  # wc c  # wcc

+ func len text
+ set -xe
+ bin/pq.py -q --py len text

oobject = len(itext)  # text characters chars len  # |wc -m  # wc m  # wcm

+ func len lines
+ set -xe
+ bin/pq.py -q --py len lines

oobject = len(itext.splitlines())  # lines len  # |wc -l  # wc l  # wcl

+ func len words
+ set -xe
+ bin/pq.py -q --py len words

oobject = len(itext.split())  # words len  # |wc -w  # wc w  # wcw

+ func text set
+ set -xe
+ bin/pq.py -q --py text set

otext = "".join(dict((_, _) for _ in itext).keys())  # text set  # text set

+ func ascii
+ set -xe
+ bin/pq.py -q --py ascii

oline = ascii(iline)  # ascii  # |cat -etv  # cat etv  # shows $'\xA0' Nbsp

+ func eval
+ set -xe
+ bin/pq.py -q --py eval

oline = str(ast.literal_eval(iline))  # eval  # undo 'ascii' or 'repr'

+ func expand
+ set -xe
+ bin/pq.py -q --py expand

otext = itext.expandtabs(tabsize=8)  # |expand  # expand expand

+ func join
+ set -xe
+ bin/pq.py -q --py join

# join  # joined  # |tr '\n' ' '  # |xargs  # xargs xargs  # x x
otext = " ".join(ilines) + "\n"

+ func repr
+ set -xe
+ bin/pq.py -q --py repr

oline = repr(iline)  # repr  # undo 'ast.literal_eval'

+ func set
+ set -xe
+ bin/pq.py -q --py set

# collections.Counter.keys  # counter  # set set set  # uniq  # uniq_everseen
olines = list(dict((_, _) for _ in ilines).keys())  # unsort  # unsorted  # dedupe

+ func split
+ set -xe
+ bin/pq.py -q --py split

# split split split  # |sed 's,  *,$,g' |tr '$' '\n'
# |xargs -n 1  # xargs n 1  # xn1
olines = itext.split()

+ func unexpand
+ set -xe
+ bin/pq.py -q --py unexpand

oline = re.sub(r" {8}", repl="\t", string=iline)  # unexpanded  # |unexpand

+ func close
+ set -xe
+ bin/pq.py -q --py close

# closed # close  # ends last line with "\n"
otext = itext if itext.endswith("\n") else (itext + "\n")

+ func dedent
+ set -xe
+ bin/pq.py -q --py dedent

otext = textwrap.dedent(itext) + "\n"  # dedent  # dedented  # textwrap.dedent

+ func deframe
+ set -xe
+ bin/pq.py -q --py deframe

# deframe  # deframed
dedent = textwrap.dedent(itext) + "\n"  # no left margin
dlines = dedent.splitlines()
olines = list(_.rstrip() for _ in dlines)  # no right margin
otext = "\n".join(olines).strip() + "\n"  # no top/bottom margins

+ func dent
+ set -xe
+ bin/pq.py -q --py dent

oline = (4 * " ") + iline  # dent  # dented  # textwrap.dented

+ func frame
+ set -xe
+ bin/pq.py -q --py frame

# frame  # framed
olines = list()
olines.extend(2 * [""])  # top margin
for iline in ilines:
    oline = (4 * " ") + iline  # left margin
    olines.append(oline)
olines.extend(2 * [""])  # bottom margin
otext = "\n".join(olines) + "\n"

+ func end
+ set -xe
+ bin/pq.py -q --py end

olines = ilines  # end  # ended  # ends every line with "\n"

+ func lower
+ set -xe
+ bin/pq.py -q --py lower

otext = itext.lower()  # lower  # lowered  # lowercased  # |tr '[A-Z]' '[a-z]'

+ func lstrip
+ set -xe
+ bin/pq.py -q --py lstrip

oline = iline.lstrip()  # lstrip  # lstripped  # |sed 's,^ *,,'

+ func reverse
+ set -xe
+ bin/pq.py -q --py reverse

iolines.reverse()  # reverse  # reversed  # |tac  # |tail -r  # tail r

+ func rstrip
+ set -xe
+ bin/pq.py -q --py rstrip

oline = iline.rstrip()  # rstrip  # rstripped  # |sed 's, *$,,'

+ func shuffle
+ set -xe
+ bin/pq.py -q --py shuffle

random.shuffle(iolines) # shuffle  # shuffled

+ func sort
+ set -xe
+ bin/pq.py -q --py sort

iolines.sort()  # sort  # sorted sorted  # s s s s s s s

+ func sponge
+ set -xe
+ bin/pq.py -q --py sponge

obytes = ibytes  # sponged  # sponge

+ func strip
+ set -xe
+ bin/pq.py -q --py strip

oline = iline.strip()  # strip  # stripped  # |sed 's,^ *,,' |sed 's, *$,,'

+ func title
+ set -xe
+ bin/pq.py -q --py title

otext = itext.title()  # title  # titled

+ func undent
+ set -xe
+ bin/pq.py -q --py undent

oline = iline.removeprefix(4 * " ")  # undent  # undented  # textwrap.undent

+ func upper
+ set -xe
+ bin/pq.py -q --py upper

otext = itext.upper()  # upper  # uppered uppercased  # |tr '[a-z]' '[A-Z]'

+ func closed
+ set -xe
+ bin/pq.py -q --py closed

# closed # close  # ends last line with "\n"
otext = itext if itext.endswith("\n") else (itext + "\n")

+ func dedented
+ set -xe
+ bin/pq.py -q --py dedented

otext = textwrap.dedent(itext) + "\n"  # dedent  # dedented  # textwrap.dedent

+ func deframed
+ set -xe
+ bin/pq.py -q --py deframed

# deframe  # deframed
dedent = textwrap.dedent(itext) + "\n"  # no left margin
dlines = dedent.splitlines()
olines = list(_.rstrip() for _ in dlines)  # no right margin
otext = "\n".join(olines).strip() + "\n"  # no top/bottom margins

+ func dented
+ set -xe
+ bin/pq.py -q --py dented

oline = (4 * " ") + iline  # dent  # dented  # textwrap.dented

+ func ended
+ set -xe
+ bin/pq.py -q --py ended

olines = ilines  # end  # ended  # ends every line with "\n"

+ func framed
+ set -xe
+ bin/pq.py -q --py framed

# frame  # framed
olines = list()
olines.extend(2 * [""])  # top margin
for iline in ilines:
    oline = (4 * " ") + iline  # left margin
    olines.append(oline)
olines.extend(2 * [""])  # bottom margin
otext = "\n".join(olines) + "\n"

+ func lowered
+ set -xe
+ bin/pq.py -q --py lowered

otext = itext.lower()  # lower  # lowered  # lowercased  # |tr '[A-Z]' '[a-z]'

+ func lstripped
+ set -xe
+ bin/pq.py -q --py lstripped

oline = iline.lstrip()  # lstrip  # lstripped  # |sed 's,^ *,,'

+ func rstripped
+ set -xe
+ bin/pq.py -q --py rstripped

oline = iline.rstrip()  # rstrip  # rstripped  # |sed 's, *$,,'

+ func reversed
+ set -xe
+ bin/pq.py -q --py reversed

iolines.reverse()  # reverse  # reversed  # |tac  # |tail -r  # tail r

+ func sorted
+ set -xe
+ bin/pq.py -q --py sorted

iolines.sort()  # sort  # sorted sorted  # s s s s s s s

+ func sponged
+ set -xe
+ bin/pq.py -q --py sponged

obytes = ibytes  # sponged  # sponge

+ func shuffled
+ set -xe
+ bin/pq.py -q --py shuffled

random.shuffle(iolines) # shuffle  # shuffled

+ func stripped
+ set -xe
+ bin/pq.py -q --py stripped

oline = iline.strip()  # strip  # stripped  # |sed 's,^ *,,' |sed 's, *$,,'

+ func titled
+ set -xe
+ bin/pq.py -q --py titled

otext = itext.title()  # title  # titled

+ func undented
+ set -xe
+ bin/pq.py -q --py undented

oline = iline.removeprefix(4 * " ")  # undent  # undented  # textwrap.undent

+ func uppered
+ set -xe
+ bin/pq.py -q --py uppered

otext = itext.upper()  # upper  # uppered uppercased  # |tr '[a-z]' '[A-Z]'

+ func e
+ set -xe
+ bin/pq.py -q --py e

oobject = math.e  # e e e e e e e

+ func pi
+ set -xe
+ bin/pq.py -q --py pi

oobject = math.pi

+ func tau
+ set -xe
+ bin/pq.py -q --py tau

oobject = math.tau

+ func iline.title
+ set -xe
+ bin/pq.py -q --py iline.title

oline = iline.title()

+ func 'iline.title()'
+ set -xe
+ bin/pq.py -q --py 'iline.title()'

oline = iline.title()

+ func math.inf
+ set -xe
+ bin/pq.py -q --py math.inf

oobject = math.inf

+ set -xe
+ bin/pq.py --py sort

python3 -c '''

import subprocess

irun = subprocess.run(["pbpaste"], capture_output=True, text=True, check=True)
itext = irun.stdout
iolines = itext.splitlines()

iolines.sort()  # sort  # sorted sorted  # s s s s s s s

otext = "\n".join(iolines) + "\n"
subprocess.run(["pbcopy"], input=otext, text=True, check=True)

'''

+ func tail -r
+ set -xe
+ bin/pq.py -q --py tail -r

iolines.reverse()  # reverse  # reversed  # |tac  # |tail -r  # tail r

+ func tac
+ set -xe
+ bin/pq.py -q --py tac

iolines.reverse()  # reverse  # reversed  # |tac  # |tail -r  # tail r

+ func uniq
+ set -xe
+ bin/pq.py -q --py uniq

# collections.Counter.keys  # counter  # set set set  # uniq  # uniq_everseen
olines = list(dict((_, _) for _ in ilines).keys())  # unsort  # unsorted  # dedupe

+ func wc c
+ set -xe
+ bin/pq.py -q --py wc c

oobject = len(ibytes)  # bytes len  # |wc -c  # wc c  # wcc

+ func wc l
+ set -xe
+ bin/pq.py -q --py wc l

oobject = len(itext.splitlines())  # lines len  # |wc -l  # wc l  # wcl

+ func wc m
+ set -xe
+ bin/pq.py -q --py wc m

oobject = len(itext)  # text characters chars len  # |wc -m  # wc m  # wcm

+ func wc w
+ set -xe
+ bin/pq.py -q --py wc w

oobject = len(itext.split())  # words len  # |wc -w  # wc w  # wcw

+ func xargs
+ set -xe
+ bin/pq.py -q --py xargs

# join  # joined  # |tr '\n' ' '  # |xargs  # xargs xargs  # x x
otext = " ".join(ilines) + "\n"

+ func a
+ set -xe
+ bin/pq.py -q --py a

# awk  # |awk '{print $NF}'  # a a a
iwords = iline.split()
oline = iwords[-1] if iwords else ""

+ func s
+ set -xe
+ bin/pq.py -q --py s

iolines.sort()  # sort  # sorted sorted  # s s s s s s s

+ func u
+ set -xe
+ bin/pq.py -q --py u

# collections.Counter.keys  # counter  # set set set  # uniq  # uniq_everseen
olines = list(dict((_, _) for _ in ilines).keys())  # unsort  # unsorted  # dedupe

+ func x
+ set -xe
+ bin/pq.py -q --py x

# join  # joined  # |tr '\n' ' '  # |xargs  # xargs xargs  # x x
otext = " ".join(ilines) + "\n"

+ func wcl
+ set -xe
+ bin/pq.py -q --py wcl

oobject = len(itext.splitlines())  # lines len  # |wc -l  # wc l  # wcl

+ func xn1
+ set -xe
+ bin/pq.py -q --py xn1

# split split split  # |sed 's,  *,$,g' |tr '$' '\n'
# |xargs -n 1  # xargs n 1  # xn1
olines = itext.split()

+ echo +
+
